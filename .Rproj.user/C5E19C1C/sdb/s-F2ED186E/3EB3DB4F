{
    "collab_server" : "",
    "contents" : "\n\n################   cov_updates    ###########################\n\nupdate_theta <- function(counts, omega, theta, metadata){\n  \n    nsamples <- nrow(counts)\n    G <- ncol(counts)\n    num_covars <- ncol(metadata)\n    K <- ncol(omega)\n    \n  \n   if(dim(omega)[1]  != dim(metadata)[1]){\n     stop(\"Number of rows in the metadata must match that of the grades of membership matrix omega\")\n   }\n  \n   if(dim(counts)[1]  != dim(metadata)[1]){\n    stop(\"Number of rows in the metadata must match the number of rows in counts matrix\")\n   }\n  \n   if(dim(theta)[2]  != dim(counts)[2]){\n    stop(\"Number of columns in the theta matrix must match the number of columns in counts matrix\")\n   }\n  \n   if(dim(theta)[1] != nsamples*K){\n     stop(\"Number of rows in theta must equal number of samples times the number of clusters\")\n   }\n  \n    cluster_fac <- rep(1:K, each = nsamples)\n    metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))\n    \n    library_size <- c(replicate(K, rowSums(counts)))\n    tmp1 <- c(omega_2)\n    tmp2 <- sweep(theta, 1, tmp1, \"*\")\n    \n    tmp3 <- tmp2\n    dim(tmp3) <- c(nsamples, K, G)\n    tmp3_normed <- aperm(apply(tmp3, c(1, 3), function(x) {\n      if(sum(x) == 0){\n        return(rep(1/length(x), length(x)))\n      }else{\n        return(x/sum(x))\n      }}), c(2,1,3))\n    \n    tmp3_normed_simplified <- tmp3_normed\n    dim(tmp3_normed_simplified) <- c(nsamples*K, G)\n    \n    counts_repped <- do.call(rbind, replicate(K, counts, simplify=FALSE))\n    \n    latent_counts <- counts_repped * tmp3_normed_simplified\n    \n    latent_counts_array <- latent_counts\n    \n    dim(latent_counts_array) <- c(nsamples, K, G)\n    \n    cl <- makeCluster(parallel::detectCores(),type=ifelse(.Platform$OS.type==\"unix\",\"FORK\",\"PSOCK\"))\n    print(cl)\n    \n    dim(metadata2)\n    metadata_cluster <- model.matrix(~factor(cluster_fac)-1)\n    metadata3 <- cbind(metadata2, metadata_cluster)\n    if(!is.null(colnames(metadata))){\n      colnames(metadata3) <- c(colnames(metadata), paste0(\"clus:\", 1:K))\n    }else{\n      colnames(metadata3) <- c(paste0(\"meta:\", 1:dim(metadata)[2]), paste0(\"clus:\", 1:K))\n    }\n    \n    fits <- distrom::dmr(cl, metadata3, latent_counts, verb=1)\n    stopCluster(cl)\n    \n    coef_fitted <- coef(fits)\n    metadata4 <- cbind(rep(1, dim(counts_repped)[1]), metadata3)\n    \n    fitted_val <- exp(metadata4 %*% coef_fitted)\n    fitted_val_2 <- t(apply(fitted_val, 1, function(x) return(x/sum(x))))\n    new_theta <- fitted_val_2\n    \n    ll <- list(\"new_theta\" =  new_theta,\n               \"distrom_model\" = fits,\n               \"coefficients\" = coef_fitted)\n    \n    return(ll)\n}\n\n\n# library(ecostructure)\n# data <- get(load(system.file(\"extdata\", \"HimalayanBirdsData.rda\", package = \"ecostructure\")))\n# nsamples <- 38\n# K <- 3\n# num_covars <- 2\n# G <- 304\n# omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))\n# theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))\n# metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)\n# library(distrom)\n# out <- update_theta(counts, omega, theta, metadata)\n# \n\n",
    "created" : 1504654504557.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "691415654",
    "id" : "3EB3DB4F",
    "lastKnownWriteTime" : 1504657108,
    "last_content_update" : 1504657108739,
    "path" : "~/Documents/covtpx/R/update_theta.R",
    "project_path" : "R/update_theta.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}