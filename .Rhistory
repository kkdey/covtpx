K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- as.matrix(c(omega))
tmp1 <- library_size * c(omega_2)
tmp2 <- sweep(ttheta, 1, tmp1, "*")
sens <- tmp2[which(cluster_fac == 1), ]+  tmp2[which(cluster_fac == 2), ] + tmp2[which(cluster_fac == 1), ]
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- as.matrix(c(omega))
tmp1 <- library_size * c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
sens <- tmp2[which(cluster_fac == 1), ]+  tmp2[which(cluster_fac == 2), ] + tmp2[which(cluster_fac == 1), ]
sens
plot(sens[1,])
plot(counts[1,])
plot(counts[2,])
plot(sens[2,])
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- c(omega)
tmp1 <- library_size * c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
sens <- tmp2[which(cluster_fac == 1), ]+  tmp2[which(cluster_fac == 2), ] + tmp2[which(cluster_fac == 1), ]
plot(sens[1,])
plot(sens[2,])
plot(counts[1,])
plot(counts[2,,])
plot(counts[2,])
counts_repped <- do.call(rbind, replicate(3, counts))
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
dim(counts_repped)
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- c(omega)
tmp1 <- c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
latent_counts <- counts_rep
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- c(omega)
tmp1 <- c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
latent_counts <- counts_repped * tmp2
dim(latent_counts)
plot(latent_counts[1,])
sens <- latent_counts[which(cluster_fac == 1), ]+  latent_counts[which(cluster_fac == 2), ] + latent_counts[which(cluster_fac == 1), ]
plot(sens[1,])
plot(counts[1,])
tmp3 <- tmp2
dim(tmp3) <- c(nsamples, K, G)
tmp3
tmp3[,,1]
tmp2[,1]
tmp3_normed <- apply(tmp3, c(1, 3), function(x) return(x/sum(x)))
tmp3_normed[1,,1]
tmp3[1,,1]
which(is.na(tmp3))
tmp3_normed <- apply(tmp3, c(1, 3), function(x) return(t(x)/sum(x)))
tmp3_normed[1,,1]
dim(tmp3_normed)
tmp3_normed <- aperm(apply(tmp3, c(1, 3), function(x) {
if(sum(x) == 0){
return(x)
}else{
return(x/sum(x))
}}), c(2,1,3))
tmp3_normed[1,,1]
tmp3[1,,1]
tmp3_normed[1,,3]
tmp3[1,,3]
tmp3_normed_simplified <- tmp3_normed
dim(tmp3_normed_simplified) <- c(nsamples*K, G)
dim(tmp3_normed_simplified)
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
latent_counts <- counts_repped * tmp3_normed_simplified
dim(latent_counts)
sens <- latent_counts[which(cluster_fac == 1), ]+  latent_counts[which(cluster_fac == 2), ] + latent_counts[which(cluster_fac == 1), ]
plot(sens[1,])
plot(sens[2,])
plot(sens[3,])
plot(counts[3,])
plot(counts[1,])
plot(sens[1,])
plot(tmp3_normed_simplified[,1])
plot(c(tmp3_normed[,1,1], tmp3_normed[,2,1], tmp3_normed[,3,1]))
plot(counts_repped[1,])
plot(counts_repped[39,])
latent_counts <- counts_repped * tmp3_normed_simplified
dim(latent_counts)
temp <- latent_counts_array[which(cluster_fac == 1), ] + latent_counts_array[which(cluster_fac == 2), ] + latent_counts_array[which(cluster_fac == 3), ]
latent_counts_array <- latent_counts
temp <- latent_counts_array[which(cluster_fac == 1), ] + latent_counts_array[which(cluster_fac == 2), ] + latent_counts_array[which(cluster_fac == 3), ]
temp
dim(temp)
plot(temp[1,])
plot(counts[1,])
plot(temp[2,])
plot(counts[2,])
temp[2,190:200]
counts2[2,190:200]
counts[2,190:200]
plot(counts[2,] - temp)
counts[2,] - temp
dim(temp)
plot(temp)
counts[2,] - temp[2,]
plot(counts[2,] - temp[2,])
which.max(counts[2,] - temp[2,])
counts[2,180:190]
temp[2,180:190]
tmp3_normed_simplified[,187]
tmp3_normed[,187]
tmp3_normed[,,187]
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- c(omega)
tmp1 <- c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
tmp3 <- tmp2
dim(tmp3) <- c(nsamples, K, G)
tmp3_normed <- aperm(apply(tmp3, c(1, 3), function(x) {
if(sum(x) == 0){
return(rep(1/length(x), length(x)))
}else{
return(x/sum(x))
}}), c(2,1,3))
tmp3_normed_simplified <- tmp3_normed
dim(tmp3_normed_simplified) <- c(nsamples*K, G)
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
latent_counts <- counts_repped * tmp3_normed_simplified
latent_counts_array <- latent_counts
temp <- latent_counts_array[which(cluster_fac == 1), ] + latent_counts_array[which(cluster_fac == 2), ] + latent_counts_array[which(cluster_fac == 3), ]
plot(temp[2,] - counts[2,])
plot(counts[2,])
plot(temp[2,])
dim(latent_counts_array)
dim(latent_counts_array) <- c(nsamples, K, G)
latent_counts_array[1, , 1]
counts[1,1]
counts[1,187]
latent_counts_array[1, , 187]
latent_counts_array[1, , 199]
latent_counts_array[1, , 200]
latent_counts_array[1, , 192]
latent_counts_array[1, , 193]
latent_counts_array[1, , 191]
latent_counts_array[1, , 194]
latent_counts_array[1, , 195]
latent_counts_array[1,]
latent_counts_array[1,,]
latent_counts_array[1,,12]
counts[1,12]
dim(latent_counts)
latent_counts[1:5,1:5]
colnames(metadata2) <- c("meta1", "meta2")
metadata2
fits <- dmr(cl, metadata2, latent_counts, verb=1)
library(distrom)
cl <- makeCluster(4,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
dim(metadata2)
colnames(metadata2) <- c("meta1", "meta2")
fits <- dmr(cl, metadata2, latent_counts, verb=1)
fits
dmr.coef(fits)
coef.dmr(fits)
fits
coef.dmr(fits)
source('~/Documents/distrom/R/dmr.R')
coef.dmr(fits)
coef_fitted <- coef.dmr(fits)
dim(coef_fitted)
metadata3 <- cbind(rep(1, dim(counts_repped)[1]), metadata2)
dim(metadata3)
fitted_val <- metadata3 %*% coef_fitted
dim(fitted_val)
fitted_val <- exp(metadata3 %*% coef_fitted)
dim(fitted_val)
fitted_val[1:5,1:5]
fitted_val <- exp(metadata3 %*% coef_fitted)
fitted_val <- apply(fitted_val, 1, function(x) return(x/sum(x)))
dim(fitted_val)
fitted_val <- exp(metadata3 %*% coef_fitted)
fitted_val_2 <- t(apply(fitted_val, 1, function(x) return(x/sum(x))))
dim(fitted_val_2)
rowSums(fitted_val_2)
model.matrix(~cluster_fac-1)
model.matrix(~cluster_fac)
model.matrix(~factor(cluster_fac)-1)
dim(metadata2)
metadata_cluster <- model.matrix(~factor(cluster_fac)-1)
metadata3 <- cbind(metadata2, metadata_cluster)
colnames(metadata3) <-  c("meta1", "meta2", "clus1", "clus2", "clus3")
dim(metadata3)
fits <- dmr(cl, metadata3, latent_counts, verb=1)
###  this fit should run  ##########################
########  extracting the coefficients from this fit   #####################
coef_fitted <- coef.dmr(fits)
metadata3 <- cbind(rep(1, dim(counts_repped)[1]), metadata2)
fitted_val <- exp(metadata3 %*% coef_fitted)
fitted_val_2 <- t(apply(fitted_val, 1, function(x) return(x/sum(x))))
coef_fitted <- coef.dmr(fits)
metadata4 <- cbind(rep(1, dim(counts_repped)[1]), metadata3)
fitted_val <- exp(metadata4 %*% coef_fitted)
fitted_val_2 <- t(apply(fitted_val, 1, function(x) return(x/sum(x))))
new_theta <- fitted_val_2
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
# theta <- cbind(replicate(nsamples, initopics[,1]), replicate(nsamples, initopics[,2]),
#                replicate(nsamples, initopics[,3]))
cluster_fac <- rep(1:K, each = nsamples)
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(3, rowSums(counts)))
omega_2 <- c(omega)
tmp1 <- c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
tmp3 <- tmp2
dim(tmp3) <- c(nsamples, K, G)
tmp3_normed <- aperm(apply(tmp3, c(1, 3), function(x) {
if(sum(x) == 0){
return(rep(1/length(x), length(x)))
}else{
return(x/sum(x))
}}), c(2,1,3))
tmp3_normed_simplified <- tmp3_normed
dim(tmp3_normed_simplified) <- c(nsamples*K, G)
counts_repped <- do.call(rbind, replicate(3, counts, simplify=FALSE))
latent_counts <- counts_repped * tmp3_normed_simplified
latent_counts_array <- latent_counts
temp <- latent_counts_array[which(cluster_fac == 1), ] + latent_counts_array[which(cluster_fac == 2), ] + latent_counts_array[which(cluster_fac == 3), ]
dim(latent_counts_array) <- c(nsamples, K, G)
library(distrom)
cl <- makeCluster(4,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
dim(metadata2)
metadata_cluster <- model.matrix(~factor(cluster_fac)-1)
metadata3 <- cbind(metadata2, metadata_cluster)
colnames(metadata3) <-  c("meta1", "meta2", "clus1", "clus2", "clus3")
fits <- dmr(cl, metadata3, latent_counts, verb=1)
stopCluster(cl)
coef_fitted <- coef.dmr(fits)
metadata4 <- cbind(rep(1, dim(counts_repped)[1]), metadata3)
dim(metadata4)
coef_fitted
fitted_val <- exp(metadata4 %*% coef_fitted)
dim(fitted_val)
fitted_val_2 <- t(apply(fitted_val, 1, function(x) return(x/sum(x))))
new_theta <- fitted_val_2
dim(new_theta)
coef(fits)
coef_fitted <- coef(fits)
coef_fitted
library(ecostructure)
## data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
## nsamples <- 38
## K <- 3
## num_covars <- 2
## G <- 304
## omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
## theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
## metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
## library(distrom)
## update_theta(counts, omega, theta, metadata)
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
update_theta(counts, omega, theta, metadata)
source('~/Documents/covtpx/R/update_theta.R')
source('~/Documents/covtpx/R/update_theta.R')
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
update_theta(counts, omega, theta, metadata)
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
dim(theta)
dim(metadata)
dim(omega)
dim(theta)
nsamples <- nrow(counts)
G <- ncol(counts)
num_covars <- ncol(metadata)
K <- ncol(omega)
if(dim(omega)[1]  != dim(metadata)[1]){
stop("Number of rows in the metadata must match that of the grades of membership matrix omega")
}
if(dim(counts)[1]  != dim(metadata)[1]){
stop("Number of rows in the metadata must match the number of rows in counts matrix")
}
if(dim(theta)[2]  != dim(counts)[2]){
stop("Number of columns in the theta matrix must match the number of columns in counts matrix")
}
if(dim(theta)[1] != namples*K){
stop("Number of rows in theta must equal number of samples times the number of clusters")
}
cluster_fac <- rep(1:K, each = nsamples)
metadata2 <- do.call(rbind, replicate(3, metadata, simplify=FALSE))
library_size <- c(replicate(K, rowSums(counts)))
tmp1 <- c(omega_2)
tmp2 <- sweep(theta, 1, tmp1, "*")
tmp3 <- tmp2
dim(tmp3) <- c(nsamples, K, G)
tmp3_normed <- aperm(apply(tmp3, c(1, 3), function(x) {
if(sum(x) == 0){
return(rep(1/length(x), length(x)))
}else{
return(x/sum(x))
}}), c(2,1,3))
tmp3_normed_simplified <- tmp3_normed
dim(tmp3_normed_simplified) <- c(nsamples*K, G)
counts_repped <- do.call(rbind, replicate(K, counts, simplify=FALSE))
latent_counts <- counts_repped * tmp3_normed_simplified
latent_counts_array <- latent_counts
dim(latent_counts_array) <- c(nsamples, K, G)
cl <- makeCluster(4,type=ifelse(.Platform$OS.type=="unix","FORK","PSOCK"))
print(cl)
dim(metadata2)
metadata_cluster <- model.matrix(~factor(cluster_fac)-1)
metadata3 <- cbind(metadata2, metadata_cluster)
colnames(metadata3) <- c(colnames(metadata), paste0("clus:", 1:K))
fits <- distrom::dmr(cl, metadata3, latent_counts, verb=1)
stopCluster(cl)
dim(metadata3)
colnames(metadata)
source('~/Documents/covtpx/R/update_theta.R')
source('~/Documents/covtpx/R/update_theta.R')
c(paste0("meta:", dim(metadata)[2]), paste0("clus:", 1:K))
dim(metadata)[2]
source('~/Documents/covtpx/R/update_theta.R')
source('~/Documents/covtpx/R/update_theta.R')
out
out$new_theta
rowSums(out$new_theta)
library(covtpx)
library(covtpx)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(counts, omega, theta, metadata)
rm(list=ls())
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(counts, omega, theta, metadata)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(data, omega, theta, metadata)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(taxonomic_counts, omega, theta, metadata)
dim(taxonomic_counts)
library(covtpx)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(taxonomic_counts, omega, theta, metadata)
out
source('~/Documents/covtpx/vignettes/trial_update_theta.R')
library(covtpx)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(taxonomic_counts, omega, theta, metadata)
update_theta()
update_theta
library(covtpx)
library(ecostructure)
library(covtpx)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda", package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
nsamples <- 38
K <- 3
num_covars <- 2
G <- 304
omega <- gtools::rdirichlet(nsamples, alpha = rep(1/K, K))
theta <- gtools::rdirichlet(nsamples*K, alpha = rep(1/(K*G), G))
metadata <- matrix(sample(1:100, nsamples*num_covars, replace=TRUE), nsamples, num_covars)
library(distrom)
out <- update_theta(taxonomic_counts, omega, theta, metadata)
